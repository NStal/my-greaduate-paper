// Generated by CoffeeScript 1.4.0
(function() {
  var KeyMaster,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  KeyMaster = (function(_super) {

    __extends(KeyMaster, _super);

    function KeyMaster() {
      var keys,
        _this = this;
      KeyMaster.__super__.constructor.call(this);
      this.attachTo(window);
      this.master();
      keys = ["up", "down", "right", "left", "space", "w"];
      this.Key = [];
      this.on("keydown", function(e) {
        var key, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          if (Leaf.Key[key] === e.which) {
            _this.Key[key] = true;
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      this.on("keyup", function(e) {
        var key, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          if (Leaf.Key[key] === e.which) {
            _this.Key[key] = false;
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }

    KeyMaster.prototype.solve = function() {
      var state;
      if (!Static.game.userShip) {
        console.log("not user ship, so can't control");
        return;
      }
      state = (this.Key.up && Ship.State.up || 0) | (this.Key.left && Ship.State.left || 0) | (this.Key.down && Ship.State.down || 0) | (this.Key.right && Ship.State.right || 0) | (this.Key.w && Ship.State.forward || 0) | (this.Key.space && Ship.State.fire || 0);
      if (state !== Static.game.userShip.state) {
        return Static.game.server.update(state);
      }
    };

    return KeyMaster;

  })(Leaf.KeyEventManager);

  Static.KeyMaster = KeyMaster;

}).call(this);
