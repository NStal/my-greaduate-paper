// Generated by CoffeeScript 1.4.0
(function() {
  var ResourceManager,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ResourceManager = (function(_super) {

    __extends(ResourceManager, _super);

    function ResourceManager() {
      ResourceManager.__super__.constructor.call(this);
      this.objects = {};
      this.objectFolder = "obj";
      this.infoFile = "info.json";
      this.textures = {};
      this.textureFolder = "texture";
      this.meshes = {};
    }

    ResourceManager.prototype.useObject = function(name, callback) {
      var loader,
        _this = this;
      this.objects[name] = null;
      loader = new Three.JSONLoader(true);
      return loader.load([this.objectFolder, name, this.infoFile].join("/"), function(geometry, materials) {
        _this.objects[name] = {
          geometry: geometry,
          materials: materials
        };
        if (_this._isRequirementComplete()) {
          _this._ready();
        }
        if (callback) {
          return callback(geometry);
        }
      });
    };

    ResourceManager.prototype._isRequirementComplete = function() {
      var item;
      if (!ResourceManager.__super__._isRequirementComplete.call(this)) {
        return false;
      }
      for (item in this.objects) {
        if (this.objects[item] === null) {
          return false;
        }
      }
      return true;
    };

    ResourceManager.prototype.preprocess = function() {
      var ball, bullet, cubeMaterial, shader, trustHifi, urlPrefix, urls, whitesharp;
      shader = Three.ShaderLib["cube"];
      urlPrefix = "texture/a04_cube.";
      urls = [urlPrefix + "px.jpg", urlPrefix + "nx.jpg", urlPrefix + "py.jpg", urlPrefix + "ny.jpg", urlPrefix + "pz.jpg", urlPrefix + "nz.jpg"];
      this.textures.cube = Three.ImageUtils.loadTextureCube(urls);
      this.textures.cube.format = Three.RGBFormat;
      shader.uniforms["tCube"].value = this.textures.cube;
      cubeMaterial = new Three.ShaderMaterial({
        fragmentShader: shader.fragmentShader,
        vertexShader: shader.vertexShader,
        uniforms: shader.uniforms
      });
      cubeMaterial.side = Three.BackSide;
      this.meshes.environmentCube = new Three.Mesh(new Three.CubeGeometry(1000000000, 1000000000, 1000000000, 1, 1, 1, null, true), cubeMaterial);
      this.objects["Spaceship"].geometry.applyMatrix(new Three.Matrix4().makeRotationY(Math.PI / 2));
      this.objects["Spaceship"].material = new Three.MeshFaceMaterial(this.objects["Spaceship"].materials);
      this.objects["Spaceship"].material.materials[0] = new Three.MeshPhongMaterial({
        color: 0xffffff
      });
      this.objects["Spaceship"].material.materials[0].envMap = this.textures.cube;
      this.objects["Spaceship"].material.materials[0].reflectivity = 1.0;
      this.objects["missile"].material = new Three.MeshFaceMaterial(this.objects["missile"].materials);
      this.objects["missile"].geometry.applyMatrix(new Three.Matrix4().makeRotationY(-Math.PI / 2));
      this.objects["missile"].material.materials[0] = new Three.MeshLambertMaterial({
        color: 0xffffff
      });
      this.objects["missile"].material.materials[0].reflectivity = 0.9;
      trustHifi = Three.ImageUtils.loadTexture("./texture/propeller/trusthifi.png");
      trustHifi.wrapS = trustHifi.wrapT = Three.RepeatWrapping;
      this.textures.trustHifi = trustHifi;
      whitesharp = Three.ImageUtils.loadTexture("./texture/propeller/whitesharp.png");
      whitesharp.wrapS = whitesharp.wrapT = Three.RepeatWrapping;
      this.textures.whitesharp = whitesharp;
      bullet = {};
      bullet.geometry = new Three.CubeGeometry(12, 12, 3000, 1, 1, 1, null, true);
      bullet.material = new Three.ParticleBasicMaterial({
        color: 0xff9966
      });
      this.objects["bullet"] = bullet;
      this.meshes.bullet = new Three.Mesh(bullet.geometry, bullet.material);
      ball = {};
      ball.geometry = new Three.SphereGeometry();
      ball.material = new Three.ParticleBasicMaterial({
        color: 0x00ffff
      });
      this.objects["ball"] = ball;
      this.meshes.ball = new Three.Mesh(ball.geometry, ball.material);
      return this.meshes.ship = new Three.Mesh(this.objects.Spaceship.geometry, this.objects.Spaceship.material);
    };

    ResourceManager.prototype.getMesh = function(name) {
      console.assert(this.meshes[name]);
      return this.meshes[name].clone();
    };

    return ResourceManager;

  })(Leaf.TemplateManager);

  exports.ResourceManager = ResourceManager;

}).call(this);
