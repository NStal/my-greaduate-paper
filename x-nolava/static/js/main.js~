// Generated by CoffeeScript 1.4.0
(function() {
  var Game, ResourceManager,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Static = {};

  window.Three = THREE;

  ResourceManager = (function(_super) {

    __extends(ResourceManager, _super);

    function ResourceManager() {
      ResourceManager.__super__.constructor.call(this);
      this.objects = {};
      this.objectFolder = "obj";
      this.infoFile = "info.json";
      this.textures = {};
      this.textureFolder = "texture";
    }

    ResourceManager.prototype.useObject = function(name, callback) {
      var loader,
        _this = this;
      this.objects[name] = null;
      loader = new Three.JSONLoader(true);
      return loader.load([this.objectFolder, name, this.infoFile].join("/"), function(geometry, materials) {
        _this.objects[name] = {
          geometry: geometry,
          materials: materials
        };
        if (_this._isRequirementComplete()) {
          _this._ready();
        }
        if (callback) {
          return callback(geometry);
        }
      });
    };

    ResourceManager.prototype._isRequirementComplete = function() {
      var item;
      if (!ResourceManager.__super__._isRequirementComplete.call(this)) {
        return false;
      }
      for (item in this.objects) {
        if (this.objects[item] === null) {
          return false;
        }
      }
      return true;
    };

    ResourceManager.prototype.preprocess = function() {
      var ball, bullet;
      this.objects["Spaceship"].geometry.applyMatrix(new Three.Matrix4().makeRotationY(Math.PI / 2));
      this.objects["Spaceship"].material = new Three.MeshFaceMaterial(this.objects["Spaceship"].materials);
      bullet = {};
      bullet.geometry = new Three.CubeGeometry(10, 10, 1000, 1, 1, 1, null, true);
      bullet.material = new Three.ParticleBasicMaterial({
        color: 0x00ffff
      });
      this.objects["bullet"] = bullet;
      ball = {};
      ball.geometry = new Three.SphereGeometry();
      ball.material = new Three.ParticleBasicMaterial({
        color: 0x00ffff
      });
      return this.objects["ball"] = ball;
    };

    return ResourceManager;

  })(Leaf.TemplateManager);

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      Game.__super__.constructor.call(this, "#scene");
      this.setupEnvironment();
      this.setupScene();
    }

    Game.prototype.setupEnvironment = function() {
      this.frameRate = 50;
      this.canvas = this.UI.canvas;
      this.height = window.innerHeight;
      this.width = window.innerWidth;
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      return this.ratio = this.width / this.height;
    };

    Game.prototype.setupScene = function() {
      var directionalLight, pointLight;
      this.scene = new Three.Scene();
      this.camera = new Static.ShipCamera(45, this.ratio, 1, 1000000000);
      this.camera.position.z = 300;
      this.scene.add(this.camera);
      this.renderer = new Three.Renderer({
        canvas: this.canvas,
        antialias: true,
        clearColor: 0x000000
      });
      this.renderer.setClearColorHex(0x000000, 1);
      this.renderer.setSize(this.width, this.height);
      directionalLight = new Three.DirectionalLight(0xffffff, 0.3);
      directionalLight.position.set(1, 1, 2).normalize();
      this.scene.add(directionalLight);
      pointLight = new Three.PointLight(0xffffff, 0.2);
      pointLight.position.set(0, 1000, -200);
      return this.scene.add(pointLight);
    };

    Game.prototype.test = function() {
      var material, shader, skyboxMesh, urlPrefix, urls;
      this.ship = this._addSpaceship();
      this.enemyShip = new Static.Ship("Spaceship");
      this.enemyShip.position.set(0, 30000, -30000);
      this.enemyShip.setDestination(new Three.Vector3(0, 0, 0));
      this.enemyShip.on("update", function() {});
      this.ship.speed = 100;
      this.enemyShip.speed = 100;
      this.enemyShip.show();
      this.ball = new Static.Ball();
      this.ball.position.set(0, 0, 0);
      this.ball.show();
      this.camera.follow(this.ship);
      shader = Three.ShaderLib["cube"];
      urlPrefix = "texture/a04_cube.";
      urls = [urlPrefix + "px.jpg", urlPrefix + "nx.jpg", urlPrefix + "py.jpg", urlPrefix + "ny.jpg", urlPrefix + "pz.jpg", urlPrefix + "nz.jpg"];
      this.textureCube = Three.ImageUtils.loadTextureCube(urls);
      this.textureCube.format = Three.RGBFormat;
      shader.uniforms["tCube"].value = this.textureCube;
      material = new Three.ShaderMaterial({
        fragmentShader: shader.fragmentShader,
        vertexShader: shader.vertexShader,
        uniforms: shader.uniforms
      });
      material.side = Three.DoubleSide;
      skyboxMesh = new Three.Mesh(new Three.CubeGeometry(1000000000, 1000000000, 1000000000, 1, 1, 1, null, true), material);
      return this.scene.add(skyboxMesh);
    };

    Game.prototype._addSpaceship = function() {
      var ship;
      ship = new Static.Ship("Spaceship");
      ship.show();
      return ship;
    };

    Game.prototype._addMaid = function() {
      var maid, maidInfo;
      maidInfo = Static.resourceManager.objects["maid"];
      maid = new Three.Mesh(maidInfo.geometry, new Three.MeshFaceMaterial(maidInfo.materials));
      maid.scale.set(1, 1, 1);
      maid.position.set(0, 0, 0);
      maid.rotation.set(0, 0, 0);
      return this.scene.add(maid);
    };

    Game.prototype.start = function() {
      var _this = this;
      return this.timer = setInterval((function() {
        return _this.update();
      }), 1000 / this.frameRate);
    };

    Game.prototype.update = function() {
      var Key, bullet;
      this.camera.update();
      this.renderer.render(this.scene, this.camera);
      Key = Static.KM.Key;
      if (Key.left) {
        this.ship.turn("left");
      } else if (Key.right) {
        this.ship.turn("right");
      }
      if (Key.up) {
        this.ship.turn("up");
      } else if (Key.down) {
        this.ship.turn("down");
      }
      this.ship.turn("none");
      if (Key.space) {
        bullet = new Static.Bullet();
        bullet.position.copy(this.ship.position);
        bullet.quaternion.copy(this.ship.quaternion);
        bullet.show();
      }
      return Static.GameObject.update();
    };

    return Game;

  })(Leaf.Widget);

  Static.resourceManager = new ResourceManager();

  Static.resourceManager.useObject("maid");

  Static.resourceManager.useObject("Spaceship");

  Static.resourceManager.on("ready", function() {
    Static.resourceManager.preprocess();
    Static.KM = new Static.KeyMaster();
    Static.game = new Game();
    Static.game.test();
    return Static.game.start();
  });

}).call(this);
