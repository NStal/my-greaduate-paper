// Generated by CoffeeScript 1.4.0
(function() {
  var ClientHandler, ClientInterface, RPCInterface, RPCServer, ServerHandler, ServerInterface, Static, rpc,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  rpc = require("../common/rpc");

  RPCInterface = rpc.RPCInterface;

  RPCServer = rpc.RPCServer;

  Static = (require("../server/static")).Static;

  ClientInterface = (function(_super) {

    __extends(ClientInterface, _super);

    function ClientInterface(ws) {
      ClientInterface.__super__.constructor.call(this, ws);
      this.declare("ticktock");
      this.declare("update", "information");
      return;
    }

    return ClientInterface;

  })(RPCInterface);

  ClientHandler = (function(_super) {

    __extends(ClientHandler, _super);

    function ClientHandler(ws) {
      ClientHandler.__super__.constructor.call(this, ws);
      this.declare("getServerTime");
      this.declare("enterGame");
      this.declare("completeSync");
      this.declare("update");
      return;
    }

    ClientHandler.prototype.getServerTime = function(callback) {
      return callback(null, Date.now());
    };

    ClientHandler.prototype.enterGame = function(username, callback) {
      var info;
      info = Static.gameMaster.newUserEnterGame(this.session, username);
      return callback(null, info);
    };

    ClientHandler.prototype.completeSync = function(callback) {
      return callback(null, Static.world.toData());
    };

    ClientHandler.prototype.update = function(state, callback) {
      var info;
      if (!this.session.user) {
        callback("Not enter game");
        return;
      }
      info = Static.gameMaster.update(this.session, state);
      if (!info) {
        callback("Fail to update");
        return;
      }
      return callback(null);
    };

    return ClientHandler;

  })(RPCServer);

  ServerInterface = (function(_super) {

    __extends(ServerInterface, _super);

    function ServerInterface(ws) {
      ServerInterface.__super__.constructor.call(this, ws);
      this.declare("getServerTime");
      this.declare("enterGame");
      this.declare("completeSync");
      this.declare("update");
      return;
    }

    return ServerInterface;

  })(RPCInterface);

  ServerHandler = (function(_super) {

    __extends(ServerHandler, _super);

    function ServerHandler(ws) {
      ServerHandler.__super__.constructor.call(this, ws);
      this.declare("ticktock");
      this.declare("update", "information");
      return;
    }

    ServerHandler.prototype.ticktock = function(callback) {
      console.log("recieve server ticktock");
      return callback(null, "");
    };

    ServerHandler.prototype.update = function(info, callback) {
      Static.game.world.updateObject(info);
      return callback(null);
    };

    return ServerHandler;

  })(RPCServer);

  exports.ClientHandler = ClientHandler;

  exports.ClientInterface = ClientInterface;

  exports.ServerInterface = ServerInterface;

  exports.ServerHandler = ServerHandler;

}).call(this);
