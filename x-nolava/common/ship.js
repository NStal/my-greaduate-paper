// Generated by CoffeeScript 1.4.0
(function() {
  var Bullet, PhysicsObject, Ship, Three, binaryToInt,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Three = (require("../common/three-node.js")).THREE;

  PhysicsObject = require("./physics").PhysicsObject;

  Ship = (function(_super) {

    __extends(Ship, _super);

    function Ship(data) {
      var state;
      console.assert(data);
      Ship.__super__.constructor.call(this, data);
      state = 0;
      this.__defineGetter__("state", function() {
        return state;
      });
      this.__defineSetter__("state", function(value) {
        if (value !== state) {
          return state = value;
        }
      });
      if (data.state) {
        this.state = data.state;
      }
      this.parameters = {};
      this.params = this.parameters;
      this.params.maxSpeed = 6;
      this.params.speedAcceleration = 0.1;
      this.params.rotateAccelerationNormal = 0.035;
      this.params.maxRotateSpeedNormal = 1.6;
      this.params.fireInterval = 100;
      this.constructor = "Ship";
    }

    Ship.prototype.updatePhysicsByShipState = function() {
      var instr;
      instr = "";
      if ((this.state & Ship.State.fire) === Ship.State.fire) {
        this.firing = true;
      } else {
        this.firing = false;
      }
      if ((this.state & Ship.State.left) === Ship.State.left) {
        instr += "left ";
        this.rotateAcceleration.y = 1;
      } else if ((this.state & Ship.State.right) === Ship.State.right) {
        this.rotateAcceleration.y = -1;
        instr += "right ";
      } else {
        this.rotateAcceleration.y = 0;
      }
      if ((this.state & Ship.State.up) === Ship.State.up) {
        instr += "up ";
        this.rotateAcceleration.x = 1;
      } else if ((this.state & Ship.State.down) === Ship.State.down) {
        instr += "down";
        this.rotateAcceleration.x = -1;
      } else {
        this.rotateAcceleration.x = 0;
      }
      if ((this.state & Ship.State.forward) === Ship.State.forward) {
        this.force.set(0, 0, -1);
        this.force.applyQuaternion(this.quaternion).multiplyScalar(this.params.speedAcceleration);
      } else {
        this.force.set(0, 0, 0);
      }
      if (this.rotateAcceleration.length() > 0.01) {
        this.rotateAcceleration.normalize().multiplyScalar(this.params.rotateAccelerationNormal);
      }
      this.maxSpeed = this.params.maxSpeed || 10;
      return this.maxRotateSpeed = this.params.maxRotateSpeedNormal || 1;
    };

    Ship.prototype.updateProperties = function(data) {
      Ship.__super__.updateProperties.call(this, data);
      if (typeof data.state === "number") {
        this.state = data.state;
      }
      return this.fireCooldown = data.fireCooldown || 0;
    };

    Ship.prototype.update = function(time) {
      this.updatePhysicsByShipState();
      return Ship.__super__.update.call(this, time);
    };

    Ship.prototype.updatePhysics = function(time) {
      Ship.__super__.updatePhysics.call(this, time);
      this.fireCooldown -= time;
      if (this.fireCooldown < 0) {
        this.fireCooldown = 0;
      }
      if (this.firing && this.fireCooldown === 0) {
        this.fireCooldown = this.params.fireInterval;
        return this.emit("fire", new Bullet({
          quaternion: this.quaternion.clone(),
          position: this.position.clone(),
          velocity: this.velocity.clone(),
          id: PhysicsObject.getNewId(),
          master: this.id
        }));
      }
    };

    Ship.prototype.toData = function() {
      var data;
      data = Ship.__super__.toData.call(this);
      data.state = this.state;
      data.constructor = "Ship";
      data.fireCooldown = this.fireCooldown;
      return data;
    };

    return Ship;

  })(PhysicsObject);

  Bullet = (function(_super) {

    __extends(Bullet, _super);

    function Bullet(data) {
      Bullet.__super__.constructor.call(this, data);
      this.params.speedAcceleration = 10;
      this.params.maxExists = 1000;
      this.params.maxSpeed = 100;
      this.state = Ship.State.forward;
      this.life = data.life || 0;
      this.params.hitDistance = 1000;
      this.master = data.master;
      this.constructor = "Bullet";
      this.ray = new Three.Ray(this.position, new Three.Vector3(0, 0, 1).applyQuaternion(this.quaternion));
    }

    Bullet.prototype.toData = function() {
      var data;
      data = Bullet.__super__.toData.call(this);
      delete data.fireCooldown;
      delete data.constructor;
      data.constructor = "Bullet";
      data.life = this.life;
      data.master = this.master;
      return data;
    };

    Bullet.prototype.exploit = function() {
      if (this.state === Ship.State.explosion) {
        return;
      }
      this.markRemove = true;
      this.emit("explosion", this);
      return this.state = Ship.State.explosion;
    };

    Bullet.prototype.updatePhysics = function(time) {
      Bullet.__super__.updatePhysics.call(this, time);
      this.life += time;
      if (this.life >= this.params.maxExists) {
        return this.exploit();
      }
    };

    Bullet.prototype.hitCheck = function(objects, time) {
      var lengthToGoSquared, object, rayDistance, _i, _len;
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        if (object === this || object.constructor !== "Ship" || object.id === this.master) {
          continue;
        }
        rayDistance = this.ray.distanceToPoint(object.position);
        if (rayDistance < this.params.hitDistance) {
          lengthToGoSquared = object.position.distanceToSquared(this.position) - (rayDistance * rayDistance);
          if (lengthToGoSquared < (this.maxSpeed * this.maxSpeed * time * time)) {
            this.emit("hit", object);
            this.exploit();
            return;
          }
        }
      }
    };

    return Bullet;

  })(Ship);

  binaryToInt = function(binaryString) {
    var byte, result, _i, _len;
    result = 0;
    for (_i = 0, _len = binaryString.length; _i < _len; _i++) {
      byte = binaryString[_i];
      result *= 2;
      console.assert(byte === "0" || byte === "1");
      if (byte === "1") {
        result += 1;
      }
    }
    return result;
  };

  Ship.State = {
    left: "1",
    right: "10",
    up: "100",
    down: "1000",
    forward: "10000",
    fire: "100000",
    explosion: "1000000"
  };

  (function() {
    var state, _results;
    _results = [];
    for (state in Ship.State) {
      _results.push(Ship.State[state] = binaryToInt(Ship.State[state]));
    }
    return _results;
  })();

  console.log("STATES", Ship.State);

  PhysicsObject.constructors.Ship = Ship;

  PhysicsObject.constructors.Bullet = Bullet;

  exports.Ship = Ship;

  exports.Bullet = Bullet;

}).call(this);
